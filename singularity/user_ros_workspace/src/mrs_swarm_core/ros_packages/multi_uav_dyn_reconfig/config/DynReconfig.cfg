#!/usr/bin/env python

#Enter your package name here
PACKAGE='multi_uav_dynreconfig'
import roslib
roslib.load_manifest(PACKAGE)

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()
# Enter a group name for your params (can be arbitary)
params = gen.add_group("Colass parameters")

# Add as many params you want to reconfigure dynamically, format: default, min, max
params.add("uav_f_rep_const", double_t, 1, "Constant controlling slope of repulsion force near zero force point", 0.16, 0, 1)
params.add("uav_f_crit_dist", double_t, 1, "Distance at which the repulsion force changes from quadratic to exp", 2.5, 0, 10.0)
params.add("uav_f_zero_dist", double_t, 1, "Distance at which the Uav force is ZERO", 4.0, 0, 10)
params.add("uav_f_coh_const", double_t, 1, "Distance at which cohesion force changes from quadratic to atan", 6, 0, 1)
params.add("uav_f_fol_dist", double_t, 1, "Constant controlling slope of cohesion force near zero force point", 0.2, 0, 10)

params.add("obst_f_const", double_t, 1, "The scale of the force", 2.0, 0, 5)
params.add("obst_f_max_dist", double_t, 1, "The distance after which the force becomes zero", 3.2, 0, 10)
params.add("k_uav", double_t, 1, "Sclaing term for UAV potential", 1.0, 0, 10)
params.add("k_nav", double_t, 1, "Sclaing term for Nav potential", 1.0, 0, 10)
params.add("k_obst", double_t, 1, "Sclaing term for Obst potential", 1.0, 0, 10)
params.add("k_drag", double_t, 1, "Sclaing term for Obst potential", 1.0, 0, 10)

#params.add("nav_force_position_constant", double_t, 1, "The constant controlling error in position difference", 0.5, 0, 10)
#params.add("nav_force_velocity_constant", double_t, 1, "The constant controlling effect of velocity", 0.5, 0, 10)

params.add("force_max_value", double_t, 1, "The maximal value of total force", 1.0, 0, 5)
params.add("vel_max_value", double_t, 1, "The maximal value of velocity of the drone", 0.5, 0, 5)
params.add("force_min_value", double_t, 1, "The value below which the force is considred to be zero", 0.05, 0, 1)
params.add("vel_min_value", double_t, 1, "The value below which the velocity is considered to be zero", 0.05, 0, 1)

#params.add("control_timer_rate", double_t, 1, "How often to create the message to control the drone", 20, 0, 60)
#params.add("path_timer_rate", double_t, 1, "How often should be the points of the path for controlling the drone", 5, 5, 5)
#params.add("path_points_number", int_t, 1, "The number of path points to calculate for the drone", 10, 0, 100)
#params.add("nav_points_dist", int_t, 1, "For path received, take every n-th point and skip the others ", 1, 1, 10)
#params.add("point_pass_dist", double_t, 1, "The distance to next navigation point required to mark the point as passed", 0, 0, 5)

params.add("controller_linear_gain", double_t, 1, "Controller gain for X-Y force", 0.05, 0, 1)
#params.add("prediction_horizon_time", double_t, 1, "Time for which the trajectory is predicted in position control mode", 5.0, 0, 10)

# use this dynReconfigConfig as import in your serevr script
exit(gen.generate(PACKAGE, "multi_uav_dynreconfig", "DynReconfig"))

